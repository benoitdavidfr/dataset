title: Réflexion sur les possibilités de stockage et de manipulation d'un jeu de données
synthèse: |
  - cette démarche répond à 5 besoins
    - utiliser facilement en Php des JdD habituels
      - liste des départements, des régions, des D(r)eal, des DDT(M), COG, AdminExpress, liste des pays, ....
      - carto mondiale simplifiée
    - associer à ces JdD une documentation sémantique et une spécification de structure
    - gérer efficacement des données un peu volumineuses comme des données géo., avec des sections qui ne tiennent pas en mémoire
    - cartographier les JdD en mode web
    - faire facilement des traitemts ensemblistes comme des jointures et des projections
JSON:
  - j'introduis la gestion de JdD directement en ODS
  - je privilégie le JSON comme format de stockage pour plusieurs raisons
  - efficacité du stockage/utilisation (est à peu près 2* plus rapide que le Php)
  - standard
  - facilité d'utilisation en Php (natif)
  - utilisation des schémas JSON
  - utilisation du GeoJSON
solution:
  généralités:
    - un JdD est identifié par un nom comme DeptReg
    - un JdD est constitué de MD et de sections de données
      - les MD sont identiques pour tous les jeux
        - title -> titre du JdD, de l'ordre d'une ligne
        - description -> texte de présentation du JdD
        - $schema -> schéma JSON du JdD
      - autant de sections nécessaires pour stocker des données
        - chacune est logiquement un itérable d'éléments, si possible homogènes mais pas forcément
        - la référence d'une section est la notion de table de n-uplets
  utilisationEnPhp:
    - je récupère un JdD par "Dataset::get({nomDS}) -> Dataset"
    - je récupère les MD par $ds->title, $ds->description et $ds->schema
    - je récupère les données par $ds->getTuples({section}, {filtre})
      - qui retourne un Generator sur les éléments de la section satisfaisant le filtre
      - avec au moins 3 types de filtre
        - valeur d'un champ dont la clé
        - intervalle de valeurs d'un champ
        - intersection avec un rectangle
    - plus traitement ensembliste de jointure
  IHM_pour_consulter:
    - données et schéma en Html et en JSON
  GeoJSON:
    - webservice GeoJSON pour exposer du GeoJSON lorsque le jeu est compatible
  mise_en_oeuvre:
    - un fichier index.php fourni l'IHM générale
    - un fichier dataset.inc.php définit la classe Dataset utilisée par les usages Php
    - chaque JdD correspond à
      - un enregistrement dans un registre adhoc
      - un fichier Php qui
        - est utilisé comme appli pour construire le JdD et vérifier sa conformité à son schéma
        - peut être intégré dans dataset.inc.php pour exposer la classe du JdD
      - une classe du JdD définie dans le fichier Php qui implémente la construction du JdD
      - une autre classe qui expose des pts d'accès std utilisables en Php
        - title -> string
        - description -> string
        - schema -> array
        - getTuples({section}, {filtre}) -> Generator
applis:
  index.php:
    - appli interactive pour
      - afficher un JdD en Html ou en JSON
      - vérifier la conformité d'un JdD à son schéma
  map.php:
    - affiche une ou des cartes Leaflet avec les données des Dataset
    - s'appuie sur un JdD map pour la définition des cartes
    - appelle geojson.php pour cartographier les JdD
  geojson.php:
    - génère le GeoJSON à partir d'un Dataset
    - respecte l'API de uGeoJSON pour filtrer les features par rectangle
eof:
